
from enum import Enum
from dataclasses import dataclass

_deolingo_prefix = "_deolingo_"


def prefix(atom):
    """
    Returns a string representing the prefix for the atoms generated by deolingo.
    """
    return _deolingo_prefix + atom


def unprefix(atom):
    """
    Returns the atom without the prefix '_deolingo_'.
    """
    return atom[len(_deolingo_prefix):]


@dataclass
class DeonticAtom:

    name: str
    long_name: str
    is_negated: bool = False
    is_obligation: bool = False
    is_forbidden: bool = False

    def prefixed(self):
        return prefix(self.name)

    def prefixed_long_name(self):
        return prefix(self.long_name)

    def wrap(self, atom):
        return f"{self.prefixed()}({atom})"


class DeonticAtoms(Enum):
    """
    Enumeration of the deontic atoms.
    """
    OBLIGATORY = DeonticAtom("ob", "obligatory", is_obligation=True)
    FORBIDDEN = DeonticAtom("fb", "forbidden", is_forbidden=True)
    NOT_OBLIGATORY = DeonticAtom("nob", "not_obligatory", is_negated=True, is_obligation=True)
    NOT_FORBIDDEN = DeonticAtom("nfb", "not_forbidden", is_negated=True, is_forbidden=False)
    HOLDS = DeonticAtom("holds", "holds")
    DEONTIC = DeonticAtom("deontic", "deontic")
    IMPLICIT_PERMISSION = DeonticAtom("imp_perm", "implicit_permission")
    EXPLICIT_PERMISSION = DeonticAtom("exp_perm", "explicit_permission")
    VIOLATED = DeonticAtom("violated", "violated")
    FULFILLED = DeonticAtom("fulfilled", "fulfilled")

    @classmethod
    def get_all(cls):
        return [cls.OBLIGATORY, cls.FORBIDDEN, cls.NOT_OBLIGATORY, cls.NOT_FORBIDDEN, cls.HOLDS, cls.DEONTIC,
                cls.IMPLICIT_PERMISSION, cls.EXPLICIT_PERMISSION, cls.VIOLATED, cls.FULFILLED]

    @classmethod
    def get_all_names(cls):
        return [atom.value.name for atom in cls.get_all()]

    @classmethod
    def with_name(cls, name):
        for atom in cls.get_all():
            if atom.value.name == name:
                return atom
        return None

    @classmethod
    def with_prefixed_name(cls, name):
        for atom in cls.get_all():
            if atom.value.prefixed() == name:
                return atom
        return None


def deontic(deontic_atom):
    return DeonticAtoms.DEONTIC.value.wrap(deontic_atom)


def violation(deontic_atom):
    return DeonticAtoms.VIOLATED.value.wrap(deontic_atom)


def fulfilled(deontic_atom):
    return DeonticAtoms.FULFILLED.value.wrap(deontic_atom)


def obligatory(deontic_atom):
    return DeonticAtoms.OBLIGATORY.value.wrap(deontic_atom)


def forbidden(deontic_atom):
    return DeonticAtoms.FORBIDDEN.value.wrap(deontic_atom)


def holds(deontic_atom):
    return DeonticAtoms.HOLDS.value.wrap(deontic_atom)


def implicit_permission(deontic_atom):
    return DeonticAtoms.IMPLICIT_PERMISSION.value.wrap(deontic_atom)


def explicit_permission(deontic_atom):
    return DeonticAtoms.EXPLICIT_PERMISSION.value.wrap(deontic_atom)
